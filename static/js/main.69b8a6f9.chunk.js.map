{"version":3,"sources":["components/DisplayPosts/Post/PostComment/ShowHideCommentsBtn/ShowHideCommentsBtn.js","lib/helpers.js","components/DisplayPosts/Post/PostComment/CommentForm/CommentForm.js","store/actions/actions.js","store/actions/actionTypes.js","components/DisplayPosts/Post/PostComment/PostComment.js","components/DisplayPosts/Post/Post.js","components/DisplayPosts/DisplayPosts.js","App.js","serviceWorker.js","store/postsReducer.js","store/sagas/getPostsSaga.js","store/selectors.js","store/sagas/getCommentsSaga.js","store/sagas/rootSaga.js","index.js"],"names":["useStyles","makeStyles","postContainer","background","minHeight","width","padding","margin","display","flexDirection","alignItems","justifyContent","buttonComments","marginTop","ShowHideCommentsBtn","getComments","postComments","setIsShowComments","isShowComments","classes","handleClick","showComments","Button","className","variant","color","onClick","Typography","addCommentsToPost","posts","comments","postId","map","post","id","fetchData","url","fetch","then","response","json","data","connect","state","dispatch","onAddComment","type","payload","actionCreators","useState","name","setName","email","setEmail","body","setBody","handleInputChange","event","target","value","handleAddCommentToPost","comment","addCommentToPost","onSubmit","e","preventDefault","form","Date","getTime","setComment","onChange","required","commentsContainer","commentContainer","boxSizing","boxShadow","borderRadius","onGetComments","key","component","Paper","elevation","title","postsContainer","flexWrap","onGetPosts","useEffect","App","React","Component","Boolean","window","location","hostname","match","initialState","postsReducer","action","getPosts","put","getPostsState","getCommentsSaga","select","watchFetchSagas","rootSaga","takeLatest","takeEvery","all","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.69b8a6f9.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  postContainer: {\n    background: \"whitesmoke\",\n    minHeight: \"12rem\",\n    width: \"20rem\",\n    padding: \"2rem\",\n    margin: \"2rem 0\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"space-between\",\n    justifyContent: \"space-between\",\n  },\n  buttonComments: {\n    marginTop: \"1rem\",\n  },\n});\n\nconst ShowHideCommentsBtn = ({\n  getComments,\n  postComments,\n  setIsShowComments,\n  isShowComments,\n}) => {\n  const classes = useStyles();\n\n  const handleClick = (showComments) => {\n    if (!postComments) {\n      getComments();\n    }\n    setIsShowComments(showComments);\n  };\n\n  return (\n    <>\n      {isShowComments && postComments ? (\n        <Button\n          className={classes.buttonComments}\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => handleClick(false)}\n        >\n          <Typography variant=\"button\">ukryj komentarze</Typography>\n        </Button>\n      ) : (\n        <Button\n          className={classes.buttonComments}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => handleClick(true)}\n        >\n          <Typography variant=\"button\">poka≈º komentarze</Typography>\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default ShowHideCommentsBtn;\n","export const addCommentsToPost = (posts, comments) => {\n  const postId = comments[0].postId;\n\n  return posts.map((post) => {\n    if (post.id === postId) {\n      post.comments = comments;\n    }\n    return post;\n  });\n};\n\nexport const addCommentToPost = (posts, postId, comment) => {\n  return posts.map((post) => {\n    if (post.id === postId) {\n      post.comments = [...post.comments, comment];\n    }\n    return post;\n  });\n};\n\nexport const fetchData = (url) => {\n  return fetch(url)\n    .then((response) => response.json())\n    .then((data) => data);\n};\n\nexport const getTimeStamp = () => {\n  return new Date().getTime();\n};\n","import React, { useState } from \"react\";\nimport * as actionCreators from \"../../../../../store/actions/actions\";\nimport { connect } from \"react-redux\";\nimport { addCommentToPost, getTimeStamp } from \"../../../../../lib/helpers\";\n\nconst CommentForm = ({ posts, postId, onAddComment }) => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n\n  const handleInputChange = (event) => {\n    const target = event.target;\n    if (target.name === \"name\") {\n      setName(target.value);\n    }\n    if (target.name === \"email\") {\n      setEmail(target.value);\n    }\n    if (target.name === \"body\") {\n      setBody(target.value);\n    }\n  };\n\n  const clearForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setBody(\"\");\n  };\n\n  const handleAddCommentToPost = (comment) => {\n    onAddComment(addCommentToPost(posts, postId, comment));\n  };\n\n  const setComment = (form) => {\n    return {\n      postId,\n      id: getTimeStamp(),\n      name: form.name.value,\n      email: form.email.value,\n      body: form.body.value,\n    };\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const form = e.target;\n    handleAddCommentToPost(setComment(form));\n    clearForm();\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <label>\n          name:\n          <input\n            name=\"name\"\n            type=\"text\"\n            value={name}\n            onChange={handleInputChange}\n            required={true}\n          />\n        </label>\n        <br />\n        <label>\n          email:\n          <input\n            name=\"email\"\n            type=\"email\"\n            value={email}\n            onChange={handleInputChange}\n          />\n        </label>\n        <br />\n        <label>\n          body:\n          <textarea\n            name=\"body\"\n            value={body}\n            onChange={handleInputChange}\n            required={true}\n          />\n        </label>\n        <br />\n        <button type=\"submit\">Submit</button>\n      </form>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { posts } = state;\n  return {\n    posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onAddComment: (posts) => dispatch(actionCreators.onAddComment(posts)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentForm);\n","import * as actionTypes from \"./actionTypes\";\n\nexport const onGetPosts = () => {\n  return {\n    type: actionTypes.ON_GET_POSTS,\n  };\n};\n\nexport const onGetComments = (postId) => {\n  return {\n    type: actionTypes.ON_GET_POST_COMMENTS,\n    payload: postId,\n  };\n};\n\nexport const onAddComment = (posts) => {\n  return {\n    type: actionTypes.ON_ADD_POST_COMMENT,\n    payload: posts,\n  };\n};\n","export const ON_GET_POSTS = \"ON_GET_POSTS\";\nexport const ON_FETCH_POSTS = \"ON_FETCH_POSTS\";\nexport const ON_GET_POST_COMMENTS = \"ON_GET_POST_COMMENTS\";\nexport const ON_FETCH_POST_COMMENTS = \"ON_FETCH_POST_COMMENTS\";\nexport const ON_ADD_POST_COMMENT = \"ON_ADD_POST_COMMENT\";\n","import React, { useState } from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport * as actionCreators from \"../../../../store/actions/actions\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ShowHideCommentsBtn from \"./ShowHideCommentsBtn/ShowHideCommentsBtn\";\nimport CommentForm from \"./CommentForm/CommentForm\";\n\nconst useStyles = makeStyles({\n  commentsContainer: {\n    width: \"100%\",\n    margin: \"0 auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  commentContainer: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    boxShadow: \"2px 2px 12px rgba(128, 128, 128, 0.37) inset\",\n    borderRadius: \"6px\",\n    padding: \".6rem\",\n    margin: \"1rem auto\",\n  },\n});\n\nconst PostComment = ({ postComments, postId, onGetComments }) => {\n  const classes = useStyles();\n\n  const [isShowComments, setIsShowComments] = useState(false);\n\n  const getComments = () => {\n    onGetComments(postId);\n  };\n\n  const displayComments = () => {\n    return postComments.map((comment) => {\n      return (\n        <section key={comment.id} className={classes.commentContainer}>\n          <p>NAME: {comment.name}</p>\n          <p>EMAIL: {comment.email}</p>\n          <Typography variant=\"body2\" component=\"p\">\n            COMMENT: {comment.body}\n          </Typography>\n        </section>\n      );\n    });\n  };\n  return (\n    <div className={classes.commentsContainer}>\n      <ShowHideCommentsBtn\n        postComments={postComments}\n        getComments={getComments}\n        setIsShowComments={setIsShowComments}\n        isShowComments={isShowComments}\n      />\n      {postComments && isShowComments && displayComments()}\n      <CommentForm postId={postId} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { posts } = state;\n  return {\n    posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetComments: (postId) => dispatch(actionCreators.onGetComments(postId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostComment);\n","import React from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport PostComment from \"./PostComment/PostComment\";\nimport { connect } from \"react-redux\";\n\nconst useStyles = makeStyles({\n  postContainer: {\n    background: \"whitesmoke\",\n    minHeight: \"12rem\",\n    width: \"20rem\",\n    padding: \"2rem\",\n    margin: \"2rem 0\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"space-between\",\n    justifyContent: \"space-between\",\n  },\n  buttonComments: {\n    marginTop: \"1rem\",\n  },\n});\n\nconst Post = ({ posts = [] }) => {\n  const classes = useStyles();\n\n  return (\n    <>\n      {posts.map((post) => {\n        return (\n          <section key={post.id}>\n            <Paper elevation={1} className={classes.postContainer}>\n              <Typography variant=\"overline\" component=\"h2\">\n                <strong>title:</strong> {post.title}\n              </Typography>\n              <Typography variant=\"body2\" component=\"p\">\n                <Typography variant=\"overline\">\n                  <strong>Body:</strong>\n                </Typography>{\" \"}\n                {post.body}\n              </Typography>\n              <PostComment postComments={post.comments} postId={post.id}/>\n            </Paper>\n          </section>\n        );\n      })}\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { posts } = state;\n\n  return {\n    posts,\n  };\n};\n\nexport default connect(mapStateToProps, null)(Post);\n","import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport * as actionCreators from \"../../store/actions/actions\";\nimport { connect } from \"react-redux\";\nimport Post from \"./Post/Post\";\n\nconst useStyles = makeStyles({\n  postsContainer: {\n    margin: \"0 auto\",\n    width: \"98vw\",\n    background: \"white\",\n    display: \"flex\",\n    flexDirection: \"columns\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n  },\n});\n\nconst DisplayPosts = ({ posts, onGetPosts }) => {\n  const classes = useStyles();\n\n  useEffect(() => {\n    onGetPosts();\n  }, [onGetPosts]);\n\n  return (\n    <main className={classes.postsContainer}>\n      <Post posts={posts} />\n    </main>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { posts } = state;\n\n  return {\n    posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetPosts: () => dispatch(actionCreators.onGetPosts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayPosts);\n","import React from \"react\";\nimport DisplayPosts from \"./components/DisplayPosts/DisplayPosts\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <DisplayPosts />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"../store/actions/actionTypes\";\n\nconst initialState = {\n  posts: [],\n};\n\nconst postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ON_FETCH_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case actionTypes.ON_FETCH_POST_COMMENTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case actionTypes.ON_ADD_POST_COMMENT:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import { put } from \"redux-saga/effects\";\nimport * as actionTypes from \"../actions/actionTypes\";\nimport {fetchData} from \"../../lib/helpers\";\n\nexport function* getPosts() {\n  const url = \"https://jsonplaceholder.typicode.com/posts\";\n  const posts = yield fetchData(url)\n  yield put({ type: actionTypes.ON_FETCH_POSTS, payload: posts });\n}\n","export const getPostsState = state => state.posts;\n\n","import { select, put } from \"redux-saga/effects\";\nimport * as actionTypes from \"../actions/actionTypes\";\nimport { getPostsState } from \"../selectors\";\nimport { addCommentsToPost, fetchData } from \"../../lib/helpers\";\n\nexport function* getCommentsSaga(action) {\n  const postId = action.payload;\n  const posts = yield select(getPostsState);\n  const url = `https://jsonplaceholder.typicode.com/comments?postId=${postId}`;\n\n  const comments = yield fetchData(url);\n\n  yield put({\n    type: actionTypes.ON_FETCH_POST_COMMENTS,\n    payload: addCommentsToPost(posts, comments),\n  });\n}\n","import { all, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport * as actionTypes from \"../actions/actionTypes\";\nimport { getPosts } from \"./getPostsSaga\";\nimport { getCommentsSaga } from \"./getCommentsSaga\";\n\nexport function* watchFetchSagas() {\n  yield takeLatest(actionTypes.ON_GET_POSTS, getPosts);\n  yield takeEvery(actionTypes.ON_GET_POST_COMMENTS, getCommentsSaga);\n}\n\nexport function* rootSaga() {                   \n  yield all([watchFetchSagas()]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport postsReducer from \"./store/postsReducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"./store/sagas/rootSaga\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  postsReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}