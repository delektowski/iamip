{"version":3,"sources":["components/DisplayPosts/Post/DisplayPostComments/ShowHideCommentsBtn/ShowHideCommentsBtn.js","lib/helpers.js","components/DisplayPosts/Post/DisplayPostComments/CommentForm/CommentForm.js","store/actions/actions.js","store/actions/actionTypes.js","components/DisplayPosts/Post/DisplayPostComments/PostComment/PostComment.js","components/DisplayPosts/Post/DisplayPostComments/DisplayPostComments.js","components/DisplayPosts/Post/Post.js","components/PostsPagination/PostsPagination.js","components/DisplayPosts/DisplayPosts.js","App.js","serviceWorker.js","store/postsReducer.js","store/sagas/getPostsSaga.js","store/selectors.js","store/sagas/getCommentsSaga.js","store/sagas/rootSaga.js","index.js"],"names":["useStyles","makeStyles","postContainer","background","minHeight","width","padding","margin","display","flexDirection","alignItems","justifyContent","buttonComments","marginTop","ShowHideCommentsBtn","getComments","postComments","setIsShowComments","isShowComments","classes","handleClick","showComments","Button","className","variant","color","onClick","Typography","addCommentsToPost","posts","comments","updatedPosts","postId","postsCopy","fromJS","postCopy","getIn","addedCommentsToPost","set","update","getIndexByKey","toJS","list","key","idToCompare","findIndex","item","fetchData","url","fetch","then","response","json","data","textField","button","connect","state","dispatch","onAddComment","type","payload","actionCreators","useState","name","setName","email","setEmail","body","setBody","isAddComment","setIsAddComment","handleInputChange","event","target","value","handleAddCommentToPost","comment","addedComment","push","postWithAddedComments","addCommentToPost","isAddCommentPossible","useCallback","regex","filter","test","id","length","useEffect","onSubmit","e","preventDefault","form","Date","getTime","setComment","TextField","label","disabled","onChange","required","placeholder","multiline","size","component","commentContainer","boxSizing","boxShadow","borderRadius","buttonContainer","PostComment","commentId","commentName","commentEmail","commentBody","onDeleteComment","postCommentsCopy","index","commentsAfterDelete","delete","postWithoutDeletedComment","deletePostComment","commentsContainer","onGetComments","setIsProgressSpinner","isShowContent","map","progressSpinnerContainer","paddingTop","postTitle","postBody","isProgressSpinner","Paper","elevation","CircularProgress","container","title","marginBottom","page","pagesAmount","onSetPage","setPage","Pagination","count","postsContainer","flexWrap","paginationContainer","position","top","zIndex","onGetPosts","onSetPagesAmount","Math","ceil","countPagesAmount","setPostAmountByPagination","reduce","accumulator","currentValue","valueId","postIdNumber","parseInt","paginationOffset","isPostAmountFitsPaginationOffset","post","App","React","Component","Boolean","window","location","hostname","match","initialState","postsReducer","action","getPosts","put","getPostsState","getCommentsSaga","select","watchFetchSagas","rootSaga","takeLatest","takeEvery","all","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3f06966e.chunk.js","sourcesContent":["import React from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  postContainer: {\n    background: \"whitesmoke\",\n    minHeight: \"12rem\",\n    width: \"20rem\",\n    padding: \"2rem\",\n    margin: \"2rem 0\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"space-between\",\n    justifyContent: \"space-between\",\n  },\n  buttonComments: {\n    marginTop: \"1rem\",\n  },\n});\n\nconst ShowHideCommentsBtn = ({\n  getComments,\n  postComments,\n  setIsShowComments,\n  isShowComments,\n}) => {\n  const classes = useStyles();\n\n  const handleClick = (showComments) => {\n    if (!postComments) {\n      getComments();\n    }\n    setIsShowComments(showComments);\n  };\n\n  return (\n    <>\n      {isShowComments && postComments ? (\n        <Button\n          className={classes.buttonComments}\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={() => handleClick(false)}\n        >\n          <Typography variant=\"button\">ukryj komentarze</Typography>\n        </Button>\n      ) : (\n        <Button\n          className={classes.buttonComments}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => handleClick(true)}\n        >\n          <Typography variant=\"button\">pokaż komentarze</Typography>\n        </Button>\n      )}\n    </>\n  );\n};\n\nexport default ShowHideCommentsBtn;\n","import { fromJS } from \"immutable\";\n\nexport const addCommentsToPost = (posts, comments) => {\n  const postId = comments[0].postId;\n  let postsCopy = fromJS(posts);\n  let updatedPosts;\n  for (let postCopy of postsCopy) {\n    const postIdCopy = postCopy.getIn([\"id\"]);\n    if (postIdCopy === postId) {\n      const addedCommentsToPost = postCopy.set(\"comments\", comments);\n\n      updatedPosts = postsCopy\n        .update(\n          getIndexByKey(postsCopy, \"id\", postId),\n          () => addedCommentsToPost\n        )\n        .toJS();\n      break;\n    }\n  }\n  return updatedPosts;\n};\n\nexport const addCommentToPost = (posts, postId, comment) => {\n  let postsCopy = fromJS(posts);\n  let updatedPosts;\n  for (let postCopy of postsCopy) {\n    const postIdCopy = postCopy.getIn([\"id\"]);\n    if (postIdCopy === postId) {\n      const postCommentsCopy = postCopy.getIn([\"comments\"]);\n      const addedComment = postCommentsCopy.push(comment);\n      const postWithAddedComments = postCopy.set(\"comments\", addedComment);\n\n      updatedPosts = postsCopy\n        .update(\n          getIndexByKey(postsCopy, \"id\", postId),\n          () => postWithAddedComments\n        )\n        .toJS();\n      break;\n    }\n  }\n  return updatedPosts;\n};\n\nexport const deletePostComment = (posts, postId, commentId) => {\n  let postsCopy = fromJS(posts);\n\n  let updatedPosts;\n  for (let postCopy of postsCopy) {\n    const postIdCopy = postCopy.getIn([\"id\"]);\n    if (postIdCopy === postId) {\n      const postCommentsCopy = postCopy.getIn([\"comments\"]);\n      const index = getIndexByKey(postCommentsCopy, \"id\", commentId);\n      const commentsAfterDelete = postCommentsCopy.delete(index);\n      const postWithoutDeletedComment = postCopy.set(\n        \"comments\",\n        commentsAfterDelete\n      );\n      updatedPosts = postsCopy\n        .update(\n          getIndexByKey(postsCopy, \"id\", postId),\n          () => postWithoutDeletedComment\n        )\n        .toJS();\n      break;\n    }\n  }\n  return updatedPosts;\n};\n\nexport const getIndexByKey = (list, key, idToCompare) => {\n  return list.findIndex((item) => {\n    return item.getIn([key]) === idToCompare;\n  });\n};\n\nexport const fetchData = (url) => {\n  return fetch(url)\n    .then((response) => response.json())\n    .then((data) => data);\n};\n\nexport const getTimeStamp = () => {\n  return new Date().getTime();\n};\n\nexport const countPagesAmount = (posts) => {\n  return Math.ceil(posts.length / 10);\n};\n\nexport const isPostAmountFitsPaginationOffset = (\n  valueId,\n  page,\n  pagesAmount\n) => {\n  const postIdNumber = parseInt(valueId);\n  const paginationOffset = page * pagesAmount;\n\n  return (\n    postIdNumber <= paginationOffset &&\n    postIdNumber > paginationOffset - pagesAmount\n  );\n};\n","import React, { useEffect, useState, useCallback } from \"react\";\nimport * as actionCreators from \"../../../../../store/actions/actions\";\nimport { connect } from \"react-redux\";\nimport { addCommentToPost, getTimeStamp } from \"../../../../../lib/helpers\";\nimport Typography from \"@material-ui/core/Typography\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  textField: {\n    margin: \".5rem 0\",\n    width: \"100%\",\n  },\n  button: {\n    marginTop: \"1rem\",\n  },\n});\n\nconst CommentForm = ({ posts, postId, onAddComment, postComments }) => {\n  const classes = useStyles();\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [body, setBody] = useState(\"\");\n  const [isAddComment, setIsAddComment] = useState(false);\n\n  const handleInputChange = (event) => {\n    const target = event.target;\n    if (target.name === \"name\") {\n      setName(target.value);\n    }\n    if (target.name === \"email\") {\n      setEmail(target.value);\n    }\n    if (target.name === \"body\") {\n      setBody(target.value);\n    }\n  };\n\n  const clearForm = () => {\n    setName(\"\");\n    setEmail(\"\");\n    setBody(\"\");\n  };\n\n  const handleAddCommentToPost = (comment) => {\n    onAddComment(addCommentToPost(posts, postId, comment));\n  };\n\n  const setComment = (form) => {\n    return {\n      postId,\n      id: `${getTimeStamp()}user`,\n      name: form.name.value,\n      email: form.email.value,\n      body: form.body.value,\n    };\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const form = e.target;\n    handleAddCommentToPost(setComment(form));\n    clearForm();\n  };\n\n  const isAddCommentPossible = useCallback(() => {\n    const regex = /user/;\n    return (\n      postComments.filter((comment) => {\n        return regex.test(comment.id);\n      }).length > 0\n    );\n  }, [postComments]);\n\n  useEffect(() => {\n    setIsAddComment(isAddCommentPossible());\n  }, [postComments, isAddCommentPossible]);\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <TextField\n          className={classes.textField}\n          label=\"Name: \"\n          name=\"name\"\n          disabled={isAddComment}\n          value={name}\n          onChange={handleInputChange}\n          required={true}\n          type=\"text\"\n          variant=\"outlined\"\n        />\n\n        <TextField\n          className={classes.textField}\n          label=\"Email: \"\n          name=\"email\"\n          disabled={isAddComment}\n          value={email}\n          onChange={handleInputChange}\n          required={false}\n          type=\"email\"\n          variant=\"outlined\"\n        />\n\n        <TextField\n          className={classes.textField}\n          label=\"Body: \"\n          name=\"body\"\n          placeholder=\"Twój komentarz\"\n          disabled={isAddComment}\n          value={body}\n          onChange={handleInputChange}\n          required={true}\n          multiline\n          variant=\"outlined\"\n        />\n\n        <Button\n          type=\"submit\"\n          variant=\"contained\"\n          color=\"primary\"\n          size=\"small\"\n          disabled={isAddComment}\n          className={classes.button}\n        >\n          Dodaj komentarz\n        </Button>\n        {isAddComment && (\n          <Typography variant=\"overline\" component=\"p\" color={\"secondary\"}>\n            You can add only 1 comment.\n          </Typography>\n        )}\n      </form>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { posts } = state;\n  return {\n    posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onAddComment: (posts) => dispatch(actionCreators.onAddComment(posts)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CommentForm);\n","import * as actionTypes from \"./actionTypes\";\n\nexport const onGetPosts = () => {\n  return {\n    type: actionTypes.ON_REQUEST_POSTS,\n  };\n};\n\nexport const onGetComments = (postId) => {\n  return {\n    type: actionTypes.ON_REQUEST_POST_COMMENTS,\n    payload: postId,\n  };\n};\n\nexport const onAddComment = (posts) => {\n  return {\n    type: actionTypes.ON_ADD_POST_COMMENT,\n    payload: posts,\n  };\n};\n\nexport const onSetPagesAmount = (pagesAmount) => {\n  return {\n    type: actionTypes.ON_SET_PAGES_AMOUNT,\n    payload: pagesAmount,\n  };\n};\n\nexport const onSetPage = (setPage) => {\n  return {\n    type: actionTypes.ON_SET_PAGE,\n    payload: setPage,\n  };\n};\nexport const onDeleteComment = (posts) => {\n  return {\n    type: actionTypes.ON_DELETE_COMMENT,\n    payload: posts,\n  };\n};\n","export const ON_REQUEST_POSTS = \"ON_REQUEST_POSTS\";\nexport const ON_FETCH_POSTS = \"ON_FETCH_POSTS\";\nexport const ON_REQUEST_POST_COMMENTS = \"ON_REQUEST_POST_COMMENTS\";\nexport const ON_FETCH_POST_COMMENTS = \"ON_FETCH_POST_COMMENTS\";\nexport const ON_ADD_POST_COMMENT = \"ON_ADD_POST_COMMENT\";\nexport const ON_SET_PAGES_AMOUNT = \"ON_SET_PAGES_AMOUNT\";\nexport const ON_SET_PAGE = \"ON_SET_PAGE\";\nexport const ON_DELETE_COMMENT = \"ON_DELETE_COMMENT\";\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { deletePostComment } from \"../../../../../lib/helpers\";\nimport Button from \"@material-ui/core/Button\";\n\nconst useStyles = makeStyles({\n  commentContainer: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    boxShadow: \"2px 2px 12px rgba(128, 128, 128, 0.37) inset\",\n    borderRadius: \"6px\",\n    padding: \".6rem\",\n    margin: \"1rem auto\",\n  },\n  buttonContainer: {\n    padding: \"1rem 0\",\n    display: \"flex\",\n    justifyContent: \"center\",\n  },\n});\n\nconst PostComment = ({\n  commentId,\n  commentName,\n  commentEmail,\n  commentBody,\n  posts,\n  onDeleteComment,\n  postId,\n}) => {\n  const classes = useStyles();\n\n  const handleDeleteComment = () => {\n    onDeleteComment(deletePostComment(posts, postId, commentId));\n  };\n  return (\n    <section key={commentId} className={classes.commentContainer}>\n      <p>NAME: {commentName}</p>\n      <p>EMAIL: {commentEmail}</p>\n      <Typography variant=\"body2\" component=\"p\">\n        COMMENT: {commentBody}\n      </Typography>\n      <div className={classes.buttonContainer}>\n        <Button\n          onClick={handleDeleteComment}\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"small\"\n        >\n          Usuń\n        </Button>\n      </div>\n    </section>\n  );\n};\n\nexport default PostComment;\n","import React, { useState } from \"react\";\nimport * as actionCreators from \"../../../../store/actions/actions\";\nimport { connect } from \"react-redux\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport ShowHideCommentsBtn from \"./ShowHideCommentsBtn/ShowHideCommentsBtn\";\nimport CommentForm from \"./CommentForm/CommentForm\";\nimport PostComment from \"./PostComment/PostComment\";\n\nconst useStyles = makeStyles({\n  commentsContainer: {\n    width: \"100%\",\n    margin: \"0 auto\",\n    display: \"flex\",\n    flexDirection: \"column\",\n  },\n  commentContainer: {\n    boxSizing: \"border-box\",\n    width: \"100%\",\n    boxShadow: \"2px 2px 12px rgba(128, 128, 128, 0.37) inset\",\n    borderRadius: \"6px\",\n    padding: \".6rem\",\n    margin: \"1rem auto\",\n  },\n});\n\nconst DisplayPostComments = ({\n  postComments,\n  postId,\n  onGetComments,\n  setIsProgressSpinner,\n  posts,\n  onDeleteComment,\n}) => {\n  const classes = useStyles();\n\n  const [isShowComments, setIsShowComments] = useState(false);\n\n  const getComments = () => {\n    setIsProgressSpinner(true);\n    onGetComments(postId);\n  };\n\n  const displayComments = () => {\n    return postComments.map((comment) => {\n      return (\n        <PostComment\n          key={comment.id}\n          commentId={comment.id}\n          commentName={comment.name}\n          commentEmail={comment.email}\n          commentBody={comment.body}\n          posts={posts}\n          postId={postId}\n          onDeleteComment={onDeleteComment}\n        />\n      );\n    });\n  };\n\n  const isShowContent = () => {\n    return postComments && isShowComments;\n  };\n  return (\n    <div className={classes.commentsContainer}>\n      <ShowHideCommentsBtn\n        postComments={postComments}\n        getComments={getComments}\n        setIsShowComments={setIsShowComments}\n        isShowComments={isShowComments}\n      />\n      {isShowContent() && displayComments()}\n      {isShowContent() && (\n        <CommentForm postId={postId} postComments={postComments} />\n      )}\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { posts } = state;\n  return {\n    posts,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetComments: (postId) => dispatch(actionCreators.onGetComments(postId)),\n  onDeleteComment: (posts) => dispatch(actionCreators.onDeleteComment(posts)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DisplayPostComments);\n","import React, { useEffect, useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport PostComment from \"./DisplayPostComments/DisplayPostComments\";\nimport { connect } from \"react-redux\";\n\nconst useStyles = makeStyles({\n  postContainer: {\n    background: \"whitesmoke\",\n    minHeight: \"20rem\",\n    width: \"20rem\",\n    padding: \"2rem\",\n    margin: \"2rem 0\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"space-between\",\n    justifyContent: \"space-between\",\n  },\n  progressSpinnerContainer: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    paddingTop: \"1rem\",\n  },\n  buttonComments: {\n    marginTop: \"1rem\",\n  },\n});\n\nconst Post = ({ postId, postTitle, postBody, postComments }) => {\n  const classes = useStyles();\n  const [isProgressSpinner, setIsProgressSpinner] = useState(false);\n\n  useEffect(() => {\n    if (postComments) {\n      setIsProgressSpinner(false);\n    }\n  }, [postComments]);\n\n  return (\n    <section key={postId}>\n      <Paper elevation={1} className={classes.postContainer}>\n        <Typography variant=\"overline\" component=\"p\">\n          <strong>{postId}</strong>\n        </Typography>\n        <Typography variant=\"overline\" component=\"h2\">\n          <strong>title:</strong> {postTitle}\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n          <Typography variant=\"overline\">\n            <strong>Body:</strong>\n          </Typography>{\" \"}\n          {postBody}\n        </Typography>\n        <PostComment\n          postComments={postComments}\n          postId={postId}\n          setIsProgressSpinner={setIsProgressSpinner}\n        />\n        <div className={classes.progressSpinnerContainer}>\n          {isProgressSpinner && <CircularProgress />}\n        </div>\n      </Paper>\n    </section>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { posts } = state;\n\n  return {\n    posts,\n  };\n};\n\nexport default connect(mapStateToProps, null)(Post);\n","import React from \"react\";\nimport Pagination from \"@material-ui/lab/Pagination\";\nimport * as actionCreators from \"../../store/actions/actions\";\nimport { connect } from \"react-redux\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  container: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexDirection: \"column\",\n  },\n  title: {\n    marginBottom: \"1rem\",\n  },\n});\n\nconst PostsPagination = ({ onSetPage, pagesAmount }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.container}>\n      <Typography className={classes.title} variant=\"h5\" component=\"h1\">\n        <strong>IamIP</strong> - recruitment task\n      </Typography>\n      <Pagination\n        count={pagesAmount}\n        color=\"primary\"\n        onChange={(e, setPage) => onSetPage(setPage)}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { page, pagesAmount } = state;\n\n  return {\n    page,\n    pagesAmount,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSetPage: (setPage) => dispatch(actionCreators.onSetPage(setPage)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PostsPagination);\n","import React, { useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport * as actionCreators from \"../../store/actions/actions\";\nimport { connect } from \"react-redux\";\nimport Post from \"./Post/Post\";\nimport PostsPagination from \"../PostsPagination/PostsPagination\";\nimport {\n  countPagesAmount,\n  isPostAmountFitsPaginationOffset,\n} from \"../../lib/helpers\";\n\nconst useStyles = makeStyles({\n  postsContainer: {\n    margin: \"4rem auto\",\n    width: \"98vw\",\n    background: \"white\",\n    display: \"flex\",\n    flexDirection: \"columns\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n  },\n  paginationContainer: {\n    position: \"fixed\",\n    top: \"0\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    background: \"white\",\n    width: \"100%\",\n    margin: \"0 auto\",\n    padding: \"1rem 0\",\n    zIndex: 100,\n  },\n});\n\nconst DisplayPosts = ({\n  posts,\n  onGetPosts,\n  onSetPagesAmount,\n  pagesAmount,\n  page,\n}) => {\n  const classes = useStyles();\n\n  useEffect(() => {\n    onGetPosts();\n  }, [onGetPosts]);\n\n  useEffect(() => {\n    onSetPagesAmount(countPagesAmount(posts));\n  }, [posts, onSetPagesAmount]);\n\n  const setPostAmountByPagination = () => {\n    return posts.reduce((accumulator, currentValue) => {\n      if (isPostAmountFitsPaginationOffset(currentValue.id, page, pagesAmount)) {\n        return [...accumulator, currentValue];\n      } else {\n        return accumulator;\n      }\n    }, []);\n  };\n\n  const displayEachPost = () => {\n    return setPostAmountByPagination().map((post) => {\n      return (\n        <Post\n          key={post.id}\n          postId={post.id}\n          postTitle={post.title}\n          postBody={post.body}\n          postComments={post.comments}\n        />\n      );\n    });\n  };\n\n  return (\n    <>\n\n      <section className={classes.paginationContainer}>\n        <PostsPagination pagesAmount={pagesAmount} />\n      </section>\n      <main className={classes.postsContainer}>{displayEachPost()}</main>\n    </>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const { posts, pagesAmount, page } = state;\n\n  return {\n    posts,\n    pagesAmount,\n    page,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onGetPosts: () => dispatch(actionCreators.onGetPosts()),\n  onSetPagesAmount: (pagesAmount) =>\n    dispatch(actionCreators.onSetPagesAmount(pagesAmount)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DisplayPosts);\n","import React from \"react\";\nimport DisplayPosts from \"./components/DisplayPosts/DisplayPosts\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n\n        <DisplayPosts />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from \"../store/actions/actionTypes\";\n\nconst initialState = {\n  posts: [],\n  pagesAmount: 0,\n  page: 1,\n};\n\nconst postsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ON_FETCH_POSTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case actionTypes.ON_FETCH_POST_COMMENTS:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case actionTypes.ON_ADD_POST_COMMENT:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    case actionTypes.ON_SET_PAGES_AMOUNT:\n      return {\n        ...state,\n        pagesAmount: action.payload,\n      };\n\n    case actionTypes.ON_SET_PAGE:\n      return {\n        ...state,\n        page: action.payload,\n      };\n\n    case actionTypes.ON_DELETE_COMMENT:\n      return {\n        ...state,\n        posts: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default postsReducer;\n","import { put } from \"redux-saga/effects\";\nimport * as actionTypes from \"../actions/actionTypes\";\nimport {fetchData} from \"../../lib/helpers\";\n\nexport function* getPosts() {\n  const url = \"https://jsonplaceholder.typicode.com/posts\";\n  const posts = yield fetchData(url)\n  yield put({ type: actionTypes.ON_FETCH_POSTS, payload: posts });\n}\n","export const getPostsState = state => state.posts;\n\n","import { select, put } from \"redux-saga/effects\";\nimport * as actionTypes from \"../actions/actionTypes\";\nimport { getPostsState } from \"../selectors\";\nimport { addCommentsToPost, fetchData } from \"../../lib/helpers\";\n\nexport function* getCommentsSaga(action) {\n  const postId = action.payload;\n  const posts = yield select(getPostsState);\n  const url = `https://jsonplaceholder.typicode.com/comments?postId=${postId}`;\n\n  const comments = yield fetchData(url);\n\n  yield put({\n    type: actionTypes.ON_FETCH_POST_COMMENTS,\n    payload: addCommentsToPost(posts, comments),\n  });\n}\n","import { all, takeEvery, takeLatest } from \"redux-saga/effects\";\nimport * as actionTypes from \"../actions/actionTypes\";\nimport { getPosts } from \"./getPostsSaga\";\nimport { getCommentsSaga } from \"./getCommentsSaga\";\n\nexport function* watchFetchSagas() {\n  yield takeLatest(actionTypes.ON_REQUEST_POSTS, getPosts);\n  yield takeEvery(actionTypes.ON_REQUEST_POST_COMMENTS, getCommentsSaga);\n}\n\nexport function* rootSaga() {                   \n  yield all([watchFetchSagas()]);\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport postsReducer from \"./store/postsReducer\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"./store/sagas/rootSaga\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  postsReducer,\n  composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}